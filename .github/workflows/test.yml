name: CI Lint & Test

on:
  push:
  workflow_dispatch:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    permissions: # <--- ADD THIS BLOCK
      contents: write # <--- Grant write access to repository contents

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'


    - name: Create dummy model_train.py to handle unexpected calls
      run: |
        echo "import sys" > model_train.py
        echo "print('WARNING: Dummy model_train.py was executed. This indicates a hardcoded path issue.')" >> model_train.py
        echo "print(f'Arguments passed: {sys.argv[1:]}')" >> model_train.py
        echo "sys.exit(0)" >> model_train.py
        echo "Dummy model_train.py created in repository root."

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint flake8 bandit pytest coverage dvc[s3]

    - name: Set up DVC and pull data from DagsHub
      run: |
        rm -f .dvc/config*
        dvc remote add -d storage s3://dvc_cloud_setup
        dvc remote modify storage endpointurl https://dagshub.com/api/v1/repo-buckets/s3/s.hakimi
        dvc remote modify storage access_key_id 04dc266bcc211e1d07d5fdfa4f9c999979cf7bb3
        dvc remote modify storage secret_access_key 04dc266bcc211e1d07d5fdfa4f9c999979cf7bb3
        dvc remote modify storage region us-east-1
        dvc pull --force

    - name: Run pylint
      run: pylint model_training/ --rcfile=.pylintrc > pylint_report.txt || true

    - name: Run flake8
      run: flake8 model_training/

    - name: Run bandit
      run: bandit -r model_training/

    - name: Run tests with pytest
      run: pytest --maxfail=1 --disable-warnings -q

    - name: Run tests with coverage
      run: |
        coverage run -m pytest
        coverage report

    - name: Extract coverage summary
      id: coverage
      run: |
        total=$(coverage report | grep TOTAL)
        echo "total=$total" >> $GITHUB_OUTPUT

    - name: Extract pylint score
      id: pylint
      run: |
        score=$(grep 'Your code has been rated at' pylint_report.txt | awk '{print $7}')
        echo "score=$score" >> $GITHUB_OUTPUT

    - name: Update README with metrics
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        sed -i "s|^Coverage:.*|Coverage: ${{ steps.coverage.outputs.total }}|g" README.md
        sed -i "s|^Pylint:.*|Pylint: ${{ steps.pylint.outputs.score }}/10|g" README.md
        git add README.md
        git commit -m "Update coverage and pylint metrics in README" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}