name: CI Lint & Test

on:
  push:
  workflow_dispatch:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Ensure write access for updating README.md

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # (Keeping dummy model_train.py step as requested, even if actual source of error might be elsewhere)
    - name: Create dummy model_train.py to handle unexpected calls
      run: |
        echo "import sys" > model_train.py
        echo "print('WARNING: Dummy model_train.py was executed. This indicates a hardcoded path issue.')" >> model_train.py
        echo "print(f'Arguments passed: {sys.argv[1:]}')" >> model_train.py
        echo "sys.exit(0)" >> model_train.py
        echo "Dummy model_train.py created in repository root."

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint flake8 bandit pytest coverage dvc[s3]

    - name: Set up DVC and pull data from DagsHub
      run: |
        rm -f .dvc/config*
        dvc remote add -d storage s3://dvc_cloud_setup
        dvc remote modify storage endpointurl https://dagshub.com/api/v1/repo-buckets/s3/s.hakimi
        dvc remote modify storage access_key_id 04dc266bcc211e1d07d5fdfa4f9c999979cf7bb3
        dvc remote modify storage secret_access_key 04dc266bcc211e1d07d5fdfa4f9c999979cf7bb3
        dvc remote modify storage region us-east-1
        dvc pull --force

    - name: Run pylint
      run: pylint model_training/ --rcfile=.pylintrc > pylint_report.txt || true

    - name: Run flake8
      run: flake8 model_training/

    - name: Run bandit
      run: bandit -r model_training/

    - name: Run tests with pytest
      run: pytest --maxfail=1 --disable-warnings -q

    - name: Run tests with coverage
      run: |
        coverage run -m pytest
        coverage report

    # --- Start: Metrics Extraction & Formatting for Badges ---
    - name: Extract coverage summary
      id: coverage
      run: |
        # Example output from 'coverage report': "TOTAL 290 72 75%"
        total_line=$(coverage report | grep TOTAL)
        percentage_str=$(echo "$total_line" | awk '{print $NF}') # Extracts "75%"
        percentage_val=${percentage_str%\%} # Converts "75%" to "75" for numeric comparison

        color="red"
        if (( percentage_val >= 80 )); then
          color="green"
        elif (( percentage_val >= 50 )); then
          color="orange"
        elif (( percentage_val >= 1 )); then # If it's 0%, maybe keep lightgrey/red
          color="red"
        else # for 0%
          color="lightgrey"
        fi

        # Output variables for subsequent steps (using GITHUB_OUTPUT as it's the modern way)
        echo "percentage_formatted=${percentage_str}" >> $GITHUB_OUTPUT
        echo "color=${color}" >> $GITHUB_OUTPUT

    - name: Extract pylint score
      id: pylint
      run: |
        # Example output: "Your code has been rated at 9.2/10"
        score=$(grep 'Your code has been rated at' pylint_report.txt | awk '{print $7}') # Extracts "9.2/10"
        score_formatted=${score/\//_} # Converts "9.2/10" to "9.2_10" for badge URL compatibility

        pylint_val=$(echo "$score" | cut -d'/' -f1) # Extracts "9.2" for numeric comparison
        # Use 'bc -l' for floating point comparisons in bash for reliability
        pylint_color="red"
        if (( $(echo "$pylint_val >= 9.0" | bc -l) )); then
          pylint_color="green"
        elif (( $(echo "$pylint_val >= 7.0" | bc -l) )); then
          pylint_color="orange"
        fi

        # Output variables for subsequent steps (using GITHUB_OUTPUT)
        echo "score_formatted=$score_formatted" >> $GITHUB_OUTPUT
        echo "color=$pylint_color" >> $GITHUB_OUTPUT
    # --- End: Metrics Extraction & Formatting for Badges ---

    - name: Update README with metrics
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Update Pylint badge in README.md
        # This regex matches the entire badge URL structure and replaces the dynamic parts.
        # It accounts for the value (e.g., "9.2/10") potentially containing slashes.
        # `([^)]+)` captures the entire segment after 'pylint-' up to the next ')', then we split it.
        # The replacement reconstructs the URL with the new value and color.
        # Using # as the sed delimiter to avoid conflicts with / in URLs.
        sed -i -E "s#(https://img.shields.io/badge/pylint-)([^)-]+)-([a-z]+)(\\))#\\1${{ steps.pylint.outputs.score_formatted}}-\\3\\4#g" README.md

        # Update Coverage badge in README.md
        # Same logic as Pylint badge.
        sed -i -E "s#(https://img.shields.io/badge/coverage-)([^)-]+)-([a-z]+)(\\))#\\1${{ steps.coverage.outputs.percentage_formatted}}-\\3\\4#g" README.md

        git add README.md
        git commit -m "Update coverage and pylint metrics in README" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}