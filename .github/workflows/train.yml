name: Train and Save Model

on:
  push:
    branches:
      - main
      - master
      - feature/workflow-updates
      - 'feature/**'
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  train-model:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Get pip cache dir
      id: pip-cache
      run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Setup dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install dvc[s3]  # Ensure DVC with S3 support is installed

    - name: Configure DVC
      run: |
        # Remove any existing DVC config to avoid conflicts
        rm -f .dvc/config*
        
        # Configure DVC with team's DagsHub storage credentials
        dvc remote add -d storage s3://dvc_cloud_setup
        dvc remote modify storage endpointurl https://dagshub.com/api/v1/repo-buckets/s3/s.hakimi
        dvc remote modify storage access_key_id 04dc266bcc211e1d07d5fdfa4f9c999979cf7bb3
        dvc remote modify storage secret_access_key 04dc266bcc211e1d07d5fdfa4f9c999979cf7bb3
        dvc remote modify storage region us-east-1

    - name: Clean workspace and pull DVC data
      run: |
        # Clean any untracked or modified files in model_service_artifacts
        rm -rf model_service_artifacts/
        
        # Force pull all DVC-tracked files
        dvc pull -v --force

    - name: Run DVC pipeline and track experiments
      run: |
        # Show current experiment state
        dvc exp show
        
        # Run the pipeline
        dvc repro -v
        
        # Show updated experiment metrics
        echo "Updated Experiment Metrics:"
        dvc exp show --no-pager
        
        # Verify pipeline outputs
        if [ ! -f "data/processed/features.csv" ]; then
          echo "❌ Processed features not found!"
          exit 1
        fi
        if [ ! -f "data/processed/bow_vectorizer.pkl" ]; then
          echo "❌ Vectorizer not found!"
          exit 1
        fi
        if [ ! -f "models/model.joblib" ]; then
          echo "❌ Model file not found!"
          exit 1
        fi
        if [ ! -f "reports/metrics.json" ]; then
          echo "❌ Metrics file not found!"
          exit 1
        fi
        if [ ! -f "reports/evaluation.json" ]; then
          echo "❌ Evaluation file not found!"
          exit 1
        fi
        
        # Display training metrics
        echo "Training Metrics:"
        cat reports/metrics.json
        echo "Evaluation Results:"
        cat reports/evaluation.json

    - name: Push DVC changes
      run: |
        dvc push -v

    - name: Prepare model artifacts for model-service
      run: |
        python prepare_for_model_service.py
        
        # Verify model service artifacts
        if [ ! -f "model_service_artifacts/c1_BoW_Sentiment_Model.pkl" ]; then
          echo "❌ Vectorizer artifact not found!"
          exit 1
        fi
        if [ ! -f "model_service_artifacts/c2_Classifier_v1.pkl" ]; then
          echo "❌ Classifier artifact not found!"
          exit 1
        fi

    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: |
          model_service_artifacts/c1_BoW_Sentiment_Model.pkl
          model_service_artifacts/c2_Classifier_v1.pkl
        retention-days: 7
        if-no-files-found: error

    - name: Upload metrics and experiment results
      uses: actions/upload-artifact@v4
      with:
        name: metrics
        path: |
          reports/metrics.json
          reports/evaluation.json
        retention-days: 7

    - name: Get artifact ID
      run: |
        # Wait a bit for the artifact to be processed
        sleep 10
        
        # Get the artifact ID using GitHub API
        ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | \
          jq -r '.artifacts[0].id')
        
        echo "Latest artifact ID: $ARTIFACT_ID"
        echo "ARTIFACT_ID=$ARTIFACT_ID" >> "$GITHUB_ENV"

    - name: Create artifact ID file
      run: |
        echo "$ARTIFACT_ID" > latest_artifact_id.txt

    - name: Upload artifact ID
      uses: actions/upload-artifact@v4
      with:
        name: artifact-id
        path: latest_artifact_id.txt
        retention-days: 7

    - name: Extract version for release
      run: |
        # Use the current version from version.txt
        CURRENT_VERSION=$(cat version.txt)
        echo "version=$CURRENT_VERSION" >> $GITHUB_ENV
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.version }}
        name: "Model Release v${{ env.version }}"
        body: "Automated model release from CI pipeline"
        files: |
          model_service_artifacts/c1_BoW_Sentiment_Model.pkl
          model_service_artifacts/c2_Classifier_v1.pkl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Bump version for next release
      run: |
        CURRENT_VERSION=$(cat version.txt)
        MAJOR=$(echo "$CURRENT_VERSION" | cut -d . -f 1)
        MINOR=$(echo "$CURRENT_VERSION" | cut -d . -f 2)
        PATCH=$(echo "$CURRENT_VERSION" | cut -d . -f 3)
        NEXT_PATCH=$((PATCH + 1))
        NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}"
        echo "$NEXT_VERSION" > version.txt

    - name: Commit and push version bump
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add version.txt
        git commit -m "Bump version to $(cat version.txt) after release" || echo "Nothing to commit"
        git push origin ${{ github.ref_name }}